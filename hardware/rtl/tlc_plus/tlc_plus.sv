/* This file is generated by GHDL, for testing with Cocotb & Verilator. */

module light
  (input  wait_on,
   input  [1:0] light_code,
   output [5:0] leds);
  wire n220_o;
  wire n223_o;
  wire n226_o;
  wire n229_o;
  wire [3:0] n230_o;
  reg [4:0] n232_o;
  reg n234_o;
  wire [5:0] n236_o;
  assign leds = n236_o; //(module output)
  /* light.vhd:27:13  */
  assign n220_o = light_code == 2'b00;
  /* light.vhd:29:13  */
  assign n223_o = light_code == 2'b01;
  /* light.vhd:31:13  */
  assign n226_o = light_code == 2'b10;
  /* light.vhd:33:13  */
  assign n229_o = light_code == 2'b11;
  assign n230_o = {n229_o, n226_o, n223_o, n220_o};
  /* light.vhd:26:9  */
  always @*
    case (n230_o)
      4'b1000: n232_o = 5'b10001;
      4'b0100: n232_o = 5'b10010;
      4'b0010: n232_o = 5'b01010;
      4'b0001: n232_o = 5'b00110;
      default: n232_o = 5'b11111;
    endcase
  /* light.vhd:26:9  */
  always @*
    case (n230_o)
      4'b1000: n234_o = wait_on;
      4'b0100: n234_o = wait_on;
      4'b0010: n234_o = wait_on;
      4'b0001: n234_o = wait_on;
      default: n234_o = 1'b1;
    endcase
  assign n236_o = {n234_o, n232_o};
endmodule

module bcd7seg
  (input  [3:0] bcd,
   input  ena,
   output [6:0] hex);
  wire n179_o;
  wire n181_o;
  wire n183_o;
  wire n185_o;
  wire n187_o;
  wire n189_o;
  wire n191_o;
  wire n193_o;
  wire n195_o;
  wire n197_o;
  wire [9:0] n198_o;
  reg [6:0] n210_o;
  wire n211_o;
  wire [6:0] n213_o;
  assign hex = n213_o; //(module output)
  /* bcd7seg.vhd:17:13  */
  assign n179_o = bcd == 4'b0000;
  /* bcd7seg.vhd:18:13  */
  assign n181_o = bcd == 4'b0001;
  /* bcd7seg.vhd:19:13  */
  assign n183_o = bcd == 4'b0010;
  /* bcd7seg.vhd:20:13  */
  assign n185_o = bcd == 4'b0011;
  /* bcd7seg.vhd:21:13  */
  assign n187_o = bcd == 4'b0100;
  /* bcd7seg.vhd:22:13  */
  assign n189_o = bcd == 4'b0101;
  /* bcd7seg.vhd:23:13  */
  assign n191_o = bcd == 4'b0110;
  /* bcd7seg.vhd:24:13  */
  assign n193_o = bcd == 4'b0111;
  /* bcd7seg.vhd:25:13  */
  assign n195_o = bcd == 4'b1000;
  /* bcd7seg.vhd:26:13  */
  assign n197_o = bcd == 4'b1001;
  assign n198_o = {n197_o, n195_o, n193_o, n191_o, n189_o, n187_o, n185_o, n183_o, n181_o, n179_o};
  /* bcd7seg.vhd:16:9  */
  always @*
    case (n198_o)
      10'b1000000000: n210_o = 7'b0010000;
      10'b0100000000: n210_o = 7'b0000000;
      10'b0010000000: n210_o = 7'b1111000;
      10'b0001000000: n210_o = 7'b0000010;
      10'b0000100000: n210_o = 7'b0010010;
      10'b0000010000: n210_o = 7'b0011001;
      10'b0000001000: n210_o = 7'b0110000;
      10'b0000000100: n210_o = 7'b0100100;
      10'b0000000010: n210_o = 7'b1111001;
      10'b0000000001: n210_o = 7'b1000000;
      default: n210_o = 7'b0000110;
    endcase
  /* bcd7seg.vhd:31:17  */
  assign n211_o = ~ena;
  /* bcd7seg.vhd:31:9  */
  assign n213_o = n211_o ? 7'b1111111 : n210_o;
endmodule

module counter_4_10
  (input  clk_i,
   input  rstn_i,
   input  load_i,
   input  enable_i,
   input  [3:0] start_time_i,
   output [3:0] count_o,
   output rollover_o);
  wire [3:0] count_s;
  wire n155_o;
  wire n158_o;
  wire [3:0] n160_o;
  wire [3:0] n162_o;
  wire [3:0] n163_o;
  wire [3:0] n164_o;
  wire n171_o;
  wire n172_o;
  reg [3:0] n174_q;
  assign count_o = count_s; //(module output)
  assign rollover_o = n172_o; //(module output)
  /* counter.vhd:24:12  */
  assign count_s = n174_q; // (signal)
  /* counter.vhd:30:19  */
  assign n155_o = ~rstn_i;
  /* counter.vhd:36:28  */
  assign n158_o = count_s == 4'b0000;
  /* counter.vhd:39:40  */
  assign n160_o = count_s - 4'b0001;
  /* counter.vhd:36:17  */
  assign n162_o = n158_o ? 4'b1001 : n160_o;
  /* counter.vhd:35:13  */
  assign n163_o = enable_i ? n162_o : count_s;
  /* counter.vhd:33:13  */
  assign n164_o = load_i ? start_time_i : n163_o;
  /* counter.vhd:46:36  */
  assign n171_o = count_s == 4'b0000;
  /* counter.vhd:46:23  */
  assign n172_o = n171_o ? 1'b1 : 1'b0;
  /* counter.vhd:32:9  */
  always @(posedge clk_i or posedge n155_o)
    if (n155_o)
      n174_q <= 4'b0000;
    else
      n174_q <= n164_o;
endmodule

module counter_27_50
  (input  clk_i,
   input  rstn_i,
   input  load_i,
   input  enable_i,
   input  [26:0] start_time_i,
   output [26:0] count_o,
   output rollover_o);
  wire [26:0] count_s;
  wire n131_o;
  wire n134_o;
  wire [26:0] n136_o;
  wire [26:0] n138_o;
  wire [26:0] n139_o;
  wire [26:0] n140_o;
  wire n147_o;
  wire n148_o;
  reg [26:0] n150_q;
  assign count_o = count_s; //(module output)
  assign rollover_o = n148_o; //(module output)
  /* counter.vhd:24:12  */
  assign count_s = n150_q; // (signal)
  /* counter.vhd:30:19  */
  assign n131_o = ~rstn_i;
  /* counter.vhd:36:28  */
  assign n134_o = count_s == 27'b000000000000000000000000000;
  /* counter.vhd:39:40  */
  assign n136_o = count_s - 27'b000000000000000000000000001;
  /* counter.vhd:36:17  */
  assign n138_o = n134_o ? 27'b000000000000000000000110001 : n136_o;
  /* counter.vhd:35:13  */
  assign n139_o = enable_i ? n138_o : count_s;
  /* counter.vhd:33:13  */
  assign n140_o = load_i ? start_time_i : n139_o;
  /* counter.vhd:46:36  */
  assign n147_o = count_s == 27'b000000000000000000000000000;
  /* counter.vhd:46:23  */
  assign n148_o = n147_o ? 1'b1 : 1'b0;
  /* counter.vhd:32:9  */
  always @(posedge clk_i or posedge n131_o)
    if (n131_o)
      n150_q <= 27'b000000000000000000000000000;
    else
      n150_q <= n140_o;
endmodule

module fsm_298be9a6c5acad6b7fdb0395b2d0831d37786817
  (input  clk_i,
   input  rstn_i,
   input  reqn_i,
   input  times_up_i,
   output [1:0] light_code_o,
   output wait_on_o,
   output timer_load_o,
   output [7:0] timer_value_o);
  wire [1:0] state;
  wire [1:0] next_state;
  wire req_reg;
  wire timer_load_normal;
  wire timer_load_rst;
  wire [7:0] timer_value_normal;
  wire [7:0] timer_value_rst;
  wire n36_o;
  wire n38_o;
  wire [7:0] n39_o;
  wire n41_o;
  wire [1:0] n43_o;
  wire n46_o;
  wire [7:0] n49_o;
  wire n51_o;
  wire [1:0] n53_o;
  wire n56_o;
  wire [7:0] n59_o;
  wire n61_o;
  wire [1:0] n63_o;
  wire n66_o;
  wire [7:0] n69_o;
  wire n71_o;
  wire [1:0] n73_o;
  wire n76_o;
  wire [7:0] n79_o;
  wire n81_o;
  wire [3:0] n82_o;
  reg [1:0] n87_o;
  reg [1:0] n88_o;
  reg n90_o;
  reg [7:0] n93_o;
  wire n97_o;
  wire n99_o;
  wire n100_o;
  wire n102_o;
  wire n104_o;
  wire [1:0] n105_o;
  reg n107_o;
  reg [1:0] n123_q;
  reg n124_q;
  reg n125_q;
  reg [7:0] n126_q;
  assign light_code_o = n87_o; //(module output)
  assign wait_on_o = req_reg; //(module output)
  assign timer_load_o = n36_o; //(module output)
  assign timer_value_o = n39_o; //(module output)
  /* fsm.vhd:35:12  */
  assign state = n123_q; // (signal)
  /* fsm.vhd:35:19  */
  assign next_state = n88_o; // (signal)
  /* fsm.vhd:38:12  */
  assign req_reg = n124_q; // (signal)
  /* fsm.vhd:40:12  */
  assign timer_load_normal = n90_o; // (signal)
  /* fsm.vhd:40:31  */
  assign timer_load_rst = n125_q; // (signal)
  /* fsm.vhd:41:12  */
  assign timer_value_normal = n93_o; // (signal)
  /* fsm.vhd:41:32  */
  assign timer_value_rst = n126_q; // (signal)
  /* fsm.vhd:45:40  */
  assign n36_o = timer_load_normal | timer_load_rst;
  /* fsm.vhd:47:35  */
  assign n38_o = timer_value_rst != 8'b00000000;
  /* fsm.vhd:47:13  */
  assign n39_o = n38_o ? timer_value_rst : timer_value_normal;
  /* fsm.vhd:61:37  */
  assign n41_o = times_up_i & req_reg;
  /* fsm.vhd:61:17  */
  assign n43_o = n41_o ? 2'b01 : state;
  /* fsm.vhd:61:17  */
  assign n46_o = n41_o ? 1'b1 : 1'b0;
  /* fsm.vhd:61:17  */
  assign n49_o = n41_o ? 8'b00000011 : 8'b00000000;
  /* fsm.vhd:59:13  */
  assign n51_o = state == 2'b00;
  /* fsm.vhd:68:17  */
  assign n53_o = times_up_i ? 2'b10 : state;
  /* fsm.vhd:68:17  */
  assign n56_o = times_up_i ? 1'b1 : 1'b0;
  /* fsm.vhd:68:17  */
  assign n59_o = times_up_i ? 8'b00000010 : 8'b00000000;
  /* fsm.vhd:66:13  */
  assign n61_o = state == 2'b01;
  /* fsm.vhd:75:17  */
  assign n63_o = times_up_i ? 2'b11 : state;
  /* fsm.vhd:75:17  */
  assign n66_o = times_up_i ? 1'b1 : 1'b0;
  /* fsm.vhd:75:17  */
  assign n69_o = times_up_i ? 8'b00010000 : 8'b00000000;
  /* fsm.vhd:73:13  */
  assign n71_o = state == 2'b10;
  /* fsm.vhd:82:17  */
  assign n73_o = times_up_i ? 2'b00 : state;
  /* fsm.vhd:82:17  */
  assign n76_o = times_up_i ? 1'b1 : 1'b0;
  /* fsm.vhd:82:17  */
  assign n79_o = times_up_i ? 8'b00001001 : 8'b00000000;
  /* fsm.vhd:80:13  */
  assign n81_o = state == 2'b11;
  assign n82_o = {n81_o, n71_o, n61_o, n51_o};
  /* fsm.vhd:58:9  */
  always @*
    case (n82_o)
      4'b1000: n87_o = 2'b11;
      4'b0100: n87_o = 2'b10;
      4'b0010: n87_o = 2'b01;
      4'b0001: n87_o = 2'b00;
      default: n87_o = n87_o;
    endcase
  /* fsm.vhd:58:9  */
  always @*
    case (n82_o)
      4'b1000: n88_o = n73_o;
      4'b0100: n88_o = n63_o;
      4'b0010: n88_o = n53_o;
      4'b0001: n88_o = n43_o;
      default: n88_o = state;
    endcase
  /* fsm.vhd:58:9  */
  always @*
    case (n82_o)
      4'b1000: n90_o = n76_o;
      4'b0100: n90_o = n66_o;
      4'b0010: n90_o = n56_o;
      4'b0001: n90_o = n46_o;
      default: n90_o = 1'b0;
    endcase
  /* fsm.vhd:58:9  */
  always @*
    case (n82_o)
      4'b1000: n93_o = n79_o;
      4'b0100: n93_o = n69_o;
      4'b0010: n93_o = n59_o;
      4'b0001: n93_o = n49_o;
      default: n93_o = 8'b00000000;
    endcase
  /* fsm.vhd:94:20  */
  assign n97_o = ~rstn_i;
  /* fsm.vhd:107:44  */
  assign n99_o = ~reqn_i;
  /* fsm.vhd:107:40  */
  assign n100_o = req_reg | n99_o;
  /* fsm.vhd:105:17  */
  assign n102_o = state == 2'b00;
  /* fsm.vhd:108:17  */
  assign n104_o = state == 2'b11;
  assign n105_o = {n104_o, n102_o};
  /* fsm.vhd:104:13  */
  always @*
    case (n105_o)
      2'b10: n107_o = 1'b0;
      2'b01: n107_o = n100_o;
      default: n107_o = req_reg;
    endcase
  /* fsm.vhd:99:9  */
  always @(posedge clk_i or posedge n97_o)
    if (n97_o)
      n123_q <= 2'b00;
    else
      n123_q <= next_state;
  /* fsm.vhd:99:9  */
  always @(posedge clk_i or posedge n97_o)
    if (n97_o)
      n124_q <= 1'b0;
    else
      n124_q <= n107_o;
  /* fsm.vhd:99:9  */
  always @(posedge clk_i or posedge n97_o)
    if (n97_o)
      n125_q <= 1'b1;
    else
      n125_q <= 1'b0;
  /* fsm.vhd:99:9  */
  always @(posedge clk_i or posedge n97_o)
    if (n97_o)
      n126_q <= 8'b00000000;
    else
      n126_q <= 8'b00000000;
endmodule

module tlc_plus
  (input  clk_i,
   input  rstn_i,
   input  reqn_i,
   output [5:0] leds,
   output [6:0] seg0_o,
   output [6:0] seg1_o);
  wire both_rollover;
  wire one_second;
  wire ten_seconds;
  wire timer_load;
  wire wait_on;
  wire [1:0] light_code;
  wire [7:0] start_time;
  wire [3:0] bcd0;
  wire [3:0] bcd1;
  wire ctd_enable;
  wire [1:0] rollovers;
  wire n5_o;
  wire n6_o;
  wire n8_o;
  wire n9_o;
  wire n12_o;
  wire n13_o;
  wire [1:0] fsm_0_light_code_o;
  wire fsm_0_wait_on_o;
  wire fsm_0_timer_load_o;
  wire [7:0] fsm_0_timer_value_o;
  wire [26:0] counter_slow_count_o;
  wire counter_slow_rollover_o;
  localparam n19_o = 1'b1;
  localparam [26:0] n20_o = 27'b000000000000000000000110010;
  wire [3:0] counter_0_count_o;
  wire counter_0_rollover_o;
  wire [3:0] n22_o;
  wire [3:0] counter_1_count_o;
  wire counter_1_rollover_o;
  wire [3:0] n25_o;
  wire [6:0] bcd7seg_0_hex;
  wire [6:0] bcd7seg_1_hex;
  wire [5:0] light_0_leds;
  wire [1:0] n31_o;
  assign leds = light_0_leds; //(module output)
  assign seg0_o = bcd7seg_0_hex; //(module output)
  assign seg1_o = bcd7seg_1_hex; //(module output)
  /* tlc_plus.vhd:29:12  */
  assign both_rollover = n6_o; // (signal)
  /* tlc_plus.vhd:30:12  */
  assign one_second = counter_slow_rollover_o; // (signal)
  /* tlc_plus.vhd:31:12  */
  assign ten_seconds = n9_o; // (signal)
  /* tlc_plus.vhd:32:12  */
  assign timer_load = fsm_0_timer_load_o; // (signal)
  /* tlc_plus.vhd:33:12  */
  assign wait_on = fsm_0_wait_on_o; // (signal)
  /* tlc_plus.vhd:34:12  */
  assign light_code = fsm_0_light_code_o; // (signal)
  /* tlc_plus.vhd:35:12  */
  assign start_time = fsm_0_timer_value_o; // (signal)
  /* tlc_plus.vhd:36:12  */
  assign bcd0 = counter_0_count_o; // (signal)
  /* tlc_plus.vhd:37:12  */
  assign bcd1 = counter_1_count_o; // (signal)
  /* tlc_plus.vhd:38:12  */
  assign ctd_enable = n13_o; // (signal)
  /* tlc_plus.vhd:39:12  */
  assign rollovers = n31_o; // (signal)
  /* tlc_plus.vhd:43:41  */
  assign n5_o = rollovers == 2'b11;
  /* tlc_plus.vhd:43:26  */
  assign n6_o = n5_o ? 1'b1 : 1'b0;
  /* tlc_plus.vhd:44:46  */
  assign n8_o = rollovers[0]; // extract
  /* tlc_plus.vhd:44:33  */
  assign n9_o = one_second & n8_o;
  /* tlc_plus.vhd:46:42  */
  assign n12_o = light_code == 2'b11;
  /* tlc_plus.vhd:46:26  */
  assign n13_o = n12_o ? 1'b1 : 1'b0;
  /* tlc_plus.vhd:48:5  */
  fsm_298be9a6c5acad6b7fdb0395b2d0831d37786817 fsm_0 (
    .clk_i(clk_i),
    .rstn_i(rstn_i),
    .reqn_i(reqn_i),
    .times_up_i(both_rollover),
    .light_code_o(fsm_0_light_code_o),
    .wait_on_o(fsm_0_wait_on_o),
    .timer_load_o(fsm_0_timer_load_o),
    .timer_value_o(fsm_0_timer_value_o));
  /* tlc_plus.vhd:60:5  */
  counter_27_50 counter_slow (
    .clk_i(clk_i),
    .rstn_i(rstn_i),
    .load_i(timer_load),
    .enable_i(n19_o),
    .start_time_i(n20_o),
    .count_o(),
    .rollover_o(counter_slow_rollover_o));
  /* tlc_plus.vhd:76:5  */
  counter_4_10 counter_0 (
    .clk_i(clk_i),
    .rstn_i(rstn_i),
    .load_i(timer_load),
    .enable_i(one_second),
    .start_time_i(n22_o),
    .count_o(counter_0_count_o),
    .rollover_o(counter_0_rollover_o));
  /* tlc_plus.vhd:86:39  */
  assign n22_o = start_time[3:0]; // extract
  /* tlc_plus.vhd:92:5  */
  counter_4_10 counter_1 (
    .clk_i(clk_i),
    .rstn_i(rstn_i),
    .load_i(timer_load),
    .enable_i(ten_seconds),
    .start_time_i(n25_o),
    .count_o(counter_1_count_o),
    .rollover_o(counter_1_rollover_o));
  /* tlc_plus.vhd:102:39  */
  assign n25_o = start_time[7:4]; // extract
  /* tlc_plus.vhd:107:5  */
  bcd7seg bcd7seg_0 (
    .bcd(bcd0),
    .ena(ctd_enable),
    .hex(bcd7seg_0_hex));
  /* tlc_plus.vhd:114:5  */
  bcd7seg bcd7seg_1 (
    .bcd(bcd1),
    .ena(ctd_enable),
    .hex(bcd7seg_1_hex));
  /* tlc_plus.vhd:121:5  */
  light light_0 (
    .wait_on(wait_on),
    .light_code(light_code),
    .leds(light_0_leds));
  assign n31_o = {counter_1_rollover_o, counter_0_rollover_o};
endmodule

